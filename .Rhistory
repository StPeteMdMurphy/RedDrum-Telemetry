##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
runtime <- proc.time()-ptm      #### how long did this take?
# warnings()
par(mfrow=c(1,1))                                                                                       #hist(as.numeric(theta))              sin(theta[i])
# library(PBSmapping)      # read bathymetry file
#plotMap(egPoly,type="n")
clr <- .PBSclr()
if(dev.cur() == 1) dev.new()
#### telemetry event data
walker <- data.frame(cbind(1:dim(aside_obs)[1],
as.numeric(aside_obs[,1]),
as.numeric(aside_obs[,2]),
as.numeric(aside_obs[,3])))
colnames(walker) <- c('EID','X','Y','label')
obs_ <-as.EventData(walker)
attr(obs_,"projection") <-"LL"
### simulation data
#### telemetry event data  head(aside_sim)
stalker <- data.frame(cbind(t(t(1:dim(aside_sim)[1])),t(t(aside_sim[,3])),
t(t(aside_sim[,2]))),t(t(1:dim(aside_sim)[1])) )
colnames(stalker) <- c('EID','X','Y','label')
sim_ <-as.EventData(stalker)
attr(sim_,"projection") <-"LL"
sconnected <- as.PolySet(data.frame(PID=rep(1,dim(stalker)[1]),POS=1:dim(stalker)[1],X=stalker$X,Y=stalker$Y),projection="LL",zone=17)
oconnected <- as.PolySet(data.frame(PID=rep(1,dim(walker)[1]),POS=1:dim(walker)[1],X=walker$X,Y=walker$Y),projection="LL",zone=17)
######################    head(sim_)
florida <- importGSHHS(paste(location,"gshhg-bin-2.2.3/gshhs_f.b",sep='/'),
xlim=c(round(min(sim_[,2],obs_[,2])-0.1,1),round(max(sim_[,2],obs_[,2])+0.1,1)),
ylim=c(round(min(sim_[,3],obs_[,3])-0.1,1),round(max(sim_[,3],obs_[,3])+0.1,1)), n=15)
# longitude in degrees east of prime meridian
plotMap(florida, bg=clr$sea, col=clr$land)
#bathy
#addLines(egPoly,col=c('black','blue','blue','blue','blue'),lty=c(1,3,3,3,3))
# addPoints(obs_,col=vr2_colW,pch=10)
addPoints(obs_,pch=10,col='blue')
addLines(oconnected,col='blue')
addLines(sconnected,col='red')
addPoints(sim_[1,],col="black",pch=21,cex=1.5)  # tag release spot   warnings()
#   addPoints(sim_[2:dim(sim_)[1],],col=pt_col[2:length(pt_col)],
#                                   pch=pch_lst[2:length(pch_lst)],
#                                   cex=pchsz_lst[2:length(pchsz_lst)])
### multiple iterations of this fishes simulated track
numsims <- 1
wbscale <- c(0.6)#,0.9,1.1,1.3) #1.0,2.0)       # weibel scalar
cmu <- c(2.8*pi/2)#,pi/2,pi,3*pi/2)  # direction (mu, radians)-- 0=east,pi/2=south,pi=west,3/2pi=north
crho <- c(0.07)#,0.4,0.6)
weib_shp <- c(2)
# weib_shp <- c(3,2,1)  # gives skew probably 0.5 (high right skew) to 2 is best, at 5 slight left skew
# wbscale <- c(0.5,0.8)       # weibel scalar -- scale of daily jump distances (0.5 is small -- 1.0 is medium-large)
# cmu <- c(0* i,3/2*pi)  # direction (mu, radians) 0*pi=east,pi/2=South,pi=west,3/2*pi=north
# crho <- c(0.0,0.01,0.02) # correlation of jumps...above 0.2 gets linear
runs_ <- numsims*length(wbscale)*length(cmu)*length(crho)
run_counter <- 0
sum_distdiffs <- matrix(rep(NA,runs_*6),ncol=6,byrow=TRUE)
tst_temp <-1e09
for(d in 1:numsims)  #d=1
{
# make weibull distributed N number of step distances    N=1000
par(mfrow=c(2,2))
for(weibsc in c(wbscale))
{
steps <- rweibull(N,weib_shp,weibsc);     # no obs., shape, and scale parameters   << Remember distance per time # N =500
#     hist(rweibull(N,5,100))
#     }
#     bearings
for(directR in c(cmu))     #direction in radians #directR=cmu
{
for(r in c(crho))                              #r=crho
{
theta <- rwrappedcauchy(N,mu=directR,rho=r)+pi/2
# mu is direction originally E and counted counter-clockwise
# adjusted to make clockwise with N=0, E=-pi/2, S=-pi, W=-3pi/2, etc.
#rose.diag(theta,bins=24)
# cumulative angle (absolute orientation)
Phi <- cumsum(theta)
# step distance components
dX <- steps*cos(theta)
dY <- steps*sin(theta)
# actual X-Y values
#  X<-cumsum(dX)
#  Y<-cumsum(dY)
# par(mfrow=c(2,1))
# plot(X,Y)
# plot(lon,lat)
# length(steps)
#### what are these actual locations? ###
lat <- rep(NA,length(steps))
lon <- rep(NA,length(steps))
distST <-  rep(NA,length(steps))
depth <-  rep(NA,length(steps))
# from first det site
distST[1] <- sqrt( dX[1]^2 + dY[1]^2 )
##### new absolute location based on bearing and distance ####
lat[1] <- (180/pi)*( asin(sin(rad_st_lat)*cos(distST[1]/6371)+cos(rad_st_lat)*sin(distST[1]/6371)*cos(theta[1])) )
lon[1] <- (180/pi)*( rad_st_lon+atan2(sin(theta[1])*sin(distST[1]/6371)*cos(rad_st_lat),
cos(distST[1]/6371)-sin(rad_st_lat)*sin(lat[1])) )
hilon <- sort(egulf[lon[1]<egulf[,1],1],decreasing=FALSE)[1] #first longitude class east of location
hilat<- sort(egulf[lat[1]<egulf[,2],2],decreasing=FALSE)[1] #first latitude north of location
depth[1] <- egulf[egulf[,1]==hilon & egulf[,2]==hilat,3]
for(i in 2:length(steps))#i=2
{
distST[i] <- sqrt( dX[i]^2 + dY[i]^2 )
### given these distances (distST) and bearings (Phi) ###
### what is location lat,lon?  Radius of earth = 6371 km
lat[i] <- (180/pi)*(asin(sin(lat[i-1]*pi/180)*cos(distST[i]/6371)+cos(lat[i-1]*pi/180)*sin(distST[i]/6371)*cos(theta[i-1]))  )
lon[i] <- (180/pi)*(lon[i-1]*pi/180+atan2(sin(theta[i-1])*sin(distST[i]/6371)*cos(lat[i-1]*pi/180),
cos(distST[i]/6371)-sin(lat[i-1]*pi/180)*sin(lat[i]*pi/180)) )
#how deep is this
hilon <- sort(egulf[lon[i]<egulf[,1],1],decreasing=FALSE)[1] #first longitude class east of location
hilat<- sort(egulf[lat[i]<egulf[,2],2],decreasing=FALSE)[1] #first latitude north of location
depth[i] <- egulf[egulf[,1]==hilon & egulf[,2]==hilat,3]
## <<off the edge of known universe ##
if (is.na(depth[i]))
{
depth[i] <- depth[i-1]
lat[i] <- lat[i-1]
lon[i] <- lon[i-1]
}
######################################
# too shallow or too deep set the next bearing to likely turn back....
if (depth[i]< (-40))     #### too deep go east
{
theta[i+1] <- rwrappedcauchy(1,mu = 0,rho=0.99)+pi/2
}             ## rwrappedcauchy(1,mu = -pi/2,rho=0.99)+pi/2
# rose.diag(rwrappedcauchy(N,mu=pi/2-pi,rho=0.8)+pi/2 ,bins=24)
if (depth[i]> (-5))     #### too shallow go west
{
theta[i+1] <- rwrappedcauchy(1,mu = -3*pi/2,rho=0.99)+pi/2
}
# #### if on land do until the fish gets back in the water in one step #######
iterd <- 0
while(depth[i]>0&iterd<=50)  # fish after step is on dry land
{
iterd<-iterd+1
#choose a new bearing toward west
newbrng <- rwrappedcauchy(1,mu=-3*pi/2,rho=0.9)+pi/2
# bearing degrees
#  rose.diag(newbrng,bins=24)
lat[i] <- (180/pi)*(asin(sin(lat[i-1]*pi/180)*cos(distST[i]/6371)+cos(lat[i-1]*pi/180)*sin(distST[i]/6371)*cos(newbrng))  )
lon[i] <- (180/pi)*(lon[i-1]*pi/180+atan2(sin(newbrng)*sin(distST[i]/6371)*cos(lat[i-1]*pi/180),
cos(distST[i]/6371)-sin(lat[i-1]*pi/180)*sin(lat[i]*pi/180)) )
#how deep is this
hilon <- sort(egulf[lon[i]<egulf[,1],1],decreasing=FALSE)[1] #first longitude class east of location
hilat<- sort(egulf[lat[i]<egulf[,2],2],decreasing=FALSE)[1] #first latitude north of location
depth[i] <- egulf[egulf[,1]==hilon & egulf[,2]==hilat,3]
}
############################################################################
# rose.diag(rwrappedcauchy(N,mu=-3*pi/2,rho=0.7)+pi/2 ,bins=24)
}  # end for loop determining new location
########### summary of simulation data ###############################
fnl_lat <- as.numeric(c(det_1$Y,lat))
fnl_lon <- as.numeric(c(det_1$X+360,lon))
hilon <- sort(egulf[fnl_lon[1]<egulf[,1],1],decreasing=FALSE)[1] #first longitude class east of location
hilat<- sort(egulf[fnl_lat[1]<egulf[,2],2],decreasing=FALSE)[1] #first latitude north of location
init_depth <- egulf[egulf[,1]==hilon & egulf[,2]==hilat,3]
fnl_depth <- c(init_depth,depth)
### rounding in sim_times---add observation if so?
if(length(sim_times)<length(fnl_lat)) sim_times <- c(sim_times,sim_times[length(sim_times)]+3600);
if(length(theta)<length(sim_times)) theta <- c(theta,NA)
if(length(distST)<length(sim_times)) distST <- c(distST,NA)
sim_data <- cbind( t(t(sim_times)),t(t(fnl_lat)),t(t(fnl_lon)),
t(t(fnl_depth)),t(t(theta*180/pi)),t(t(distST)) )   #  length(distST)
#############################################################
##### what is the closest time in sim data to that in observed data? #####
lookt <-  sort(sim_times,descending=FALSE)
#### look at lower and higher sim time step ##
cntr <- rep(NA,length(det_timeW))
cntr[1] <- 1
for(k in 2:length(det_timeW))
{
laterT <- lookt[as.POSIXct(det_timeW[k])<lookt][1]
earlierT <-  lookt[as.POSIXct(det_timeW[k])>lookt][1]
ifelse(difftime(as.POSIXct(det_timeW[k]),as.POSIXct(earlierT))
> difftime(as.POSIXct(laterT),as.POSIXct(det_timeW[k])),
cntr[k] <- match(laterT,lookt), cntr[k] <- match(earlierT,lookt))
# for when the last observed detection is later than end of sim
if(is.na(cntr[k])) cntr[k] <- length(lookt)
}
###### for the observation-simulation matches ####
pt_col[cntr]<- vr2_colW         # length(pt_col)
pch_lst[cntr] <- 5
pchsz_lst[cntr] <- 0.5
# HERE must determine distances between those common times in observed and simulation
distdiff <- rep(NA,dim(obs_dat)[1])
for(h in 1:dim(obs_dat)[1])
{
#distance between common points
rad_lat1 <- as.numeric(obs_dat[h,2])*pi/180
rad_lon1 <- (as.numeric(obs_dat[h,1])+360)*pi/180
#   rad_lat2 <- sim_data[cntr[h],2]*pi/180
#   rad_lon2 <- sim_data[cntr[h],3]*pi/180
rad_lat2 <- sim_data[(obs_dat[h,3]+1),2]*pi/180
rad_lon2 <- sim_data[(obs_dat[h,3]+1),3]*pi/180
del_lat <- rad_lat1-rad_lat2
del_lon <- rad_lon1-rad_lon2
intermed <- sin(del_lat/2)^2 + cos(rad_lat[m+1])*cos(rad_lat[m])*sin(del_lon/2)^2
intermed2 <- 2*asin(min(1,sqrt(intermed)))
distdiff[h] <- 6371. * intermed2
}
run_counter <- run_counter+1
sum_distdiffs[run_counter,1] <- sum(distdiff)
sum_distdiffs[run_counter,2] <- d # sim_number
sum_distdiffs[run_counter,3] <- weibsc # weibel scale factor
sum_distdiffs[run_counter,4] <- (directR+pi/2)*180/pi # compass heading
sum_distdiffs[run_counter,5] <- r # correlation for compass heading
sum_distdiffs[run_counter,6] <- 1 # good run
if(iterd==50) sum_distdiffs[run_counter,6] <- 0;  # bad run
#min(sum_distdiffs[,1],na.rm=TRUE)
#     hist(sum_distdiffs[sum_distdiffs[,2]==4&
#                         sum_distdiffs[,3]==0.9,1])
if (sum_distdiffs[run_counter,1] < tst_temp)
{
aside_sim <- sim_data
aside_obs <- obs_dat
tst_temp <- sum_distdiffs[run_counter,1]
}
} #correlation for random walk
} #####compass heading loop
} #### weibel scale parameter
}  #### run simulations across d
#              sum_distdiffs[sum_distdiffs[,1]==min(sum_distdiffs[,1]),]
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
runtime <- proc.time()-ptm      #### how long did this take?
# warnings()
par(mfrow=c(1,1))                                                                                       #hist(as.numeric(theta))              sin(theta[i])
# library(PBSmapping)      # read bathymetry file
#plotMap(egPoly,type="n")
clr <- .PBSclr()
if(dev.cur() == 1) dev.new()
#### telemetry event data
walker <- data.frame(cbind(1:dim(aside_obs)[1],
as.numeric(aside_obs[,1]),
as.numeric(aside_obs[,2]),
as.numeric(aside_obs[,3])))
colnames(walker) <- c('EID','X','Y','label')
obs_ <-as.EventData(walker)
attr(obs_,"projection") <-"LL"
### simulation data
#### telemetry event data  head(aside_sim)
stalker <- data.frame(cbind(t(t(1:dim(aside_sim)[1])),t(t(aside_sim[,3])),
t(t(aside_sim[,2]))),t(t(1:dim(aside_sim)[1])) )
colnames(stalker) <- c('EID','X','Y','label')
sim_ <-as.EventData(stalker)
attr(sim_,"projection") <-"LL"
sconnected <- as.PolySet(data.frame(PID=rep(1,dim(stalker)[1]),POS=1:dim(stalker)[1],X=stalker$X,Y=stalker$Y),projection="LL",zone=17)
oconnected <- as.PolySet(data.frame(PID=rep(1,dim(walker)[1]),POS=1:dim(walker)[1],X=walker$X,Y=walker$Y),projection="LL",zone=17)
######################    head(sim_)
florida <- importGSHHS(paste(location,"gshhg-bin-2.2.3/gshhs_f.b",sep='/'),
xlim=c(round(min(sim_[,2],obs_[,2])-0.1,1),round(max(sim_[,2],obs_[,2])+0.1,1)),
ylim=c(round(min(sim_[,3],obs_[,3])-0.1,1),round(max(sim_[,3],obs_[,3])+0.1,1)), n=15)
# longitude in degrees east of prime meridian
plotMap(florida, bg=clr$sea, col=clr$land)
#bathy
#addLines(egPoly,col=c('black','blue','blue','blue','blue'),lty=c(1,3,3,3,3))
# addPoints(obs_,col=vr2_colW,pch=10)
addPoints(obs_,pch=10,col='blue')
addLines(oconnected,col='blue')
addLines(sconnected,col='red')
addPoints(sim_[1,],col="black",pch=21,cex=1.5)  # tag release spot   warnings()
#   addPoints(sim_[2:dim(sim_)[1],],col=pt_col[2:length(pt_col)],
#                                   pch=pch_lst[2:length(pch_lst)],
#                                   cex=pchsz_lst[2:length(pchsz_lst)])
#   addPoints(sim_[11:20,],col="orange",pch=7)
#   addPoints(sim_[20:dim(sim_)[1],],col="green",pch=7)
#legend(x="bottomleft",bty="n",col=c('black','blue','blue','blue','blue'),
#         lwd=1,legend=as.character(isob),lty=c(1,3,3,3,3))
#### multiple iterations of this fishes simulated track
numsims <- 1
wbscale <- c(0.6)#,0.9,1.1,1.3) #1.0,2.0)       # weibel scalar
cmu <- c(2.9*pi/2)#,pi/2,pi,3*pi/2)  # direction (mu, radians)-- 0=east,pi/2=south,pi=west,3/2pi=north
crho <- c(0.07)#,0.4,0.6)
weib_shp <- c(2)
# weib_shp <- c(3,2,1)  # gives skew probably 0.5 (high right skew) to 2 is best, at 5 slight left skew
# wbscale <- c(0.5,0.8)       # weibel scalar -- scale of daily jump distances (0.5 is small -- 1.0 is medium-large)
# cmu <- c(0* i,3/2*pi)  # direction (mu, radians) 0*pi=east,pi/2=South,pi=west,3/2*pi=north
# crho <- c(0.0,0.01,0.02) # correlation of jumps...above 0.2 gets linear
runs_ <- numsims*length(wbscale)*length(cmu)*length(crho)
run_counter <- 0
sum_distdiffs <- matrix(rep(NA,runs_*6),ncol=6,byrow=TRUE)
tst_temp <-1e09
for(d in 1:numsims)  #d=1
{
# make weibull distributed N number of step distances    N=1000
par(mfrow=c(2,2))
for(weibsc in c(wbscale))
{
steps <- rweibull(N,weib_shp,weibsc);     # no obs., shape, and scale parameters   << Remember distance per time # N =500
#     hist(rweibull(N,5,100))
#     }
#     bearings
for(directR in c(cmu))     #direction in radians #directR=cmu
{
for(r in c(crho))                              #r=crho
{
theta <- rwrappedcauchy(N,mu=directR,rho=r)+pi/2
# mu is direction originally E and counted counter-clockwise
# adjusted to make clockwise with N=0, E=-pi/2, S=-pi, W=-3pi/2, etc.
#rose.diag(theta,bins=24)
# cumulative angle (absolute orientation)
Phi <- cumsum(theta)
# step distance components
dX <- steps*cos(theta)
dY <- steps*sin(theta)
# actual X-Y values
#  X<-cumsum(dX)
#  Y<-cumsum(dY)
# par(mfrow=c(2,1))
# plot(X,Y)
# plot(lon,lat)
# length(steps)
#### what are these actual locations? ###
lat <- rep(NA,length(steps))
lon <- rep(NA,length(steps))
distST <-  rep(NA,length(steps))
depth <-  rep(NA,length(steps))
# from first det site
distST[1] <- sqrt( dX[1]^2 + dY[1]^2 )
##### new absolute location based on bearing and distance ####
lat[1] <- (180/pi)*( asin(sin(rad_st_lat)*cos(distST[1]/6371)+cos(rad_st_lat)*sin(distST[1]/6371)*cos(theta[1])) )
lon[1] <- (180/pi)*( rad_st_lon+atan2(sin(theta[1])*sin(distST[1]/6371)*cos(rad_st_lat),
cos(distST[1]/6371)-sin(rad_st_lat)*sin(lat[1])) )
hilon <- sort(egulf[lon[1]<egulf[,1],1],decreasing=FALSE)[1] #first longitude class east of location
hilat<- sort(egulf[lat[1]<egulf[,2],2],decreasing=FALSE)[1] #first latitude north of location
depth[1] <- egulf[egulf[,1]==hilon & egulf[,2]==hilat,3]
for(i in 2:length(steps))#i=2
{
distST[i] <- sqrt( dX[i]^2 + dY[i]^2 )
### given these distances (distST) and bearings (Phi) ###
### what is location lat,lon?  Radius of earth = 6371 km
lat[i] <- (180/pi)*(asin(sin(lat[i-1]*pi/180)*cos(distST[i]/6371)+cos(lat[i-1]*pi/180)*sin(distST[i]/6371)*cos(theta[i-1]))  )
lon[i] <- (180/pi)*(lon[i-1]*pi/180+atan2(sin(theta[i-1])*sin(distST[i]/6371)*cos(lat[i-1]*pi/180),
cos(distST[i]/6371)-sin(lat[i-1]*pi/180)*sin(lat[i]*pi/180)) )
#how deep is this
hilon <- sort(egulf[lon[i]<egulf[,1],1],decreasing=FALSE)[1] #first longitude class east of location
hilat<- sort(egulf[lat[i]<egulf[,2],2],decreasing=FALSE)[1] #first latitude north of location
depth[i] <- egulf[egulf[,1]==hilon & egulf[,2]==hilat,3]
## <<off the edge of known universe ##
if (is.na(depth[i]))
{
depth[i] <- depth[i-1]
lat[i] <- lat[i-1]
lon[i] <- lon[i-1]
}
######################################
# too shallow or too deep set the next bearing to likely turn back....
if (depth[i]< (-40))     #### too deep go east
{
theta[i+1] <- rwrappedcauchy(1,mu = 0,rho=0.99)+pi/2
}             ## rwrappedcauchy(1,mu = -pi/2,rho=0.99)+pi/2
# rose.diag(rwrappedcauchy(N,mu=pi/2-pi,rho=0.8)+pi/2 ,bins=24)
if (depth[i]> (-5))     #### too shallow go west
{
theta[i+1] <- rwrappedcauchy(1,mu = -3*pi/2,rho=0.99)+pi/2
}
# #### if on land do until the fish gets back in the water in one step #######
iterd <- 0
while(depth[i]>0&iterd<=50)  # fish after step is on dry land
{
iterd<-iterd+1
#choose a new bearing toward west
newbrng <- rwrappedcauchy(1,mu=-3*pi/2,rho=0.9)+pi/2
# bearing degrees
#  rose.diag(newbrng,bins=24)
lat[i] <- (180/pi)*(asin(sin(lat[i-1]*pi/180)*cos(distST[i]/6371)+cos(lat[i-1]*pi/180)*sin(distST[i]/6371)*cos(newbrng))  )
lon[i] <- (180/pi)*(lon[i-1]*pi/180+atan2(sin(newbrng)*sin(distST[i]/6371)*cos(lat[i-1]*pi/180),
cos(distST[i]/6371)-sin(lat[i-1]*pi/180)*sin(lat[i]*pi/180)) )
#how deep is this
hilon <- sort(egulf[lon[i]<egulf[,1],1],decreasing=FALSE)[1] #first longitude class east of location
hilat<- sort(egulf[lat[i]<egulf[,2],2],decreasing=FALSE)[1] #first latitude north of location
depth[i] <- egulf[egulf[,1]==hilon & egulf[,2]==hilat,3]
}
############################################################################
# rose.diag(rwrappedcauchy(N,mu=-3*pi/2,rho=0.7)+pi/2 ,bins=24)
}  # end for loop determining new location
########### summary of simulation data ###############################
fnl_lat <- as.numeric(c(det_1$Y,lat))
fnl_lon <- as.numeric(c(det_1$X+360,lon))
hilon <- sort(egulf[fnl_lon[1]<egulf[,1],1],decreasing=FALSE)[1] #first longitude class east of location
hilat<- sort(egulf[fnl_lat[1]<egulf[,2],2],decreasing=FALSE)[1] #first latitude north of location
init_depth <- egulf[egulf[,1]==hilon & egulf[,2]==hilat,3]
fnl_depth <- c(init_depth,depth)
### rounding in sim_times---add observation if so?
if(length(sim_times)<length(fnl_lat)) sim_times <- c(sim_times,sim_times[length(sim_times)]+3600);
if(length(theta)<length(sim_times)) theta <- c(theta,NA)
if(length(distST)<length(sim_times)) distST <- c(distST,NA)
sim_data <- cbind( t(t(sim_times)),t(t(fnl_lat)),t(t(fnl_lon)),
t(t(fnl_depth)),t(t(theta*180/pi)),t(t(distST)) )   #  length(distST)
#############################################################
##### what is the closest time in sim data to that in observed data? #####
lookt <-  sort(sim_times,descending=FALSE)
#### look at lower and higher sim time step ##
cntr <- rep(NA,length(det_timeW))
cntr[1] <- 1
for(k in 2:length(det_timeW))
{
laterT <- lookt[as.POSIXct(det_timeW[k])<lookt][1]
earlierT <-  lookt[as.POSIXct(det_timeW[k])>lookt][1]
ifelse(difftime(as.POSIXct(det_timeW[k]),as.POSIXct(earlierT))
> difftime(as.POSIXct(laterT),as.POSIXct(det_timeW[k])),
cntr[k] <- match(laterT,lookt), cntr[k] <- match(earlierT,lookt))
# for when the last observed detection is later than end of sim
if(is.na(cntr[k])) cntr[k] <- length(lookt)
}
###### for the observation-simulation matches ####
pt_col[cntr]<- vr2_colW         # length(pt_col)
pch_lst[cntr] <- 5
pchsz_lst[cntr] <- 0.5
# HERE must determine distances between those common times in observed and simulation
distdiff <- rep(NA,dim(obs_dat)[1])
for(h in 1:dim(obs_dat)[1])
{
#distance between common points
rad_lat1 <- as.numeric(obs_dat[h,2])*pi/180
rad_lon1 <- (as.numeric(obs_dat[h,1])+360)*pi/180
#   rad_lat2 <- sim_data[cntr[h],2]*pi/180
#   rad_lon2 <- sim_data[cntr[h],3]*pi/180
rad_lat2 <- sim_data[(obs_dat[h,3]+1),2]*pi/180
rad_lon2 <- sim_data[(obs_dat[h,3]+1),3]*pi/180
del_lat <- rad_lat1-rad_lat2
del_lon <- rad_lon1-rad_lon2
intermed <- sin(del_lat/2)^2 + cos(rad_lat[m+1])*cos(rad_lat[m])*sin(del_lon/2)^2
intermed2 <- 2*asin(min(1,sqrt(intermed)))
distdiff[h] <- 6371. * intermed2
}
run_counter <- run_counter+1
sum_distdiffs[run_counter,1] <- sum(distdiff)
sum_distdiffs[run_counter,2] <- d # sim_number
sum_distdiffs[run_counter,3] <- weibsc # weibel scale factor
sum_distdiffs[run_counter,4] <- (directR+pi/2)*180/pi # compass heading
sum_distdiffs[run_counter,5] <- r # correlation for compass heading
sum_distdiffs[run_counter,6] <- 1 # good run
if(iterd==50) sum_distdiffs[run_counter,6] <- 0;  # bad run
#min(sum_distdiffs[,1],na.rm=TRUE)
#     hist(sum_distdiffs[sum_distdiffs[,2]==4&
#                         sum_distdiffs[,3]==0.9,1])
if (sum_distdiffs[run_counter,1] < tst_temp)
{
aside_sim <- sim_data
aside_obs <- obs_dat
tst_temp <- sum_distdiffs[run_counter,1]
}
} #correlation for random walk
} #####compass heading loop
} #### weibel scale parameter
}  #### run simulations across d
#              sum_distdiffs[sum_distdiffs[,1]==min(sum_distdiffs[,1]),]
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
runtime <- proc.time()-ptm      #### how long did this take?
# warnings()
par(mfrow=c(1,1))                                                                                       #hist(as.numeric(theta))              sin(theta[i])
# library(PBSmapping)      # read bathymetry file
#plotMap(egPoly,type="n")
clr <- .PBSclr()
if(dev.cur() == 1) dev.new()
#### telemetry event data
walker <- data.frame(cbind(1:dim(aside_obs)[1],
as.numeric(aside_obs[,1]),
as.numeric(aside_obs[,2]),
as.numeric(aside_obs[,3])))
colnames(walker) <- c('EID','X','Y','label')
obs_ <-as.EventData(walker)
attr(obs_,"projection") <-"LL"
### simulation data
#### telemetry event data  head(aside_sim)
stalker <- data.frame(cbind(t(t(1:dim(aside_sim)[1])),t(t(aside_sim[,3])),
t(t(aside_sim[,2]))),t(t(1:dim(aside_sim)[1])) )
colnames(stalker) <- c('EID','X','Y','label')
sim_ <-as.EventData(stalker)
attr(sim_,"projection") <-"LL"
sconnected <- as.PolySet(data.frame(PID=rep(1,dim(stalker)[1]),POS=1:dim(stalker)[1],X=stalker$X,Y=stalker$Y),projection="LL",zone=17)
oconnected <- as.PolySet(data.frame(PID=rep(1,dim(walker)[1]),POS=1:dim(walker)[1],X=walker$X,Y=walker$Y),projection="LL",zone=17)
######################    head(sim_)
florida <- importGSHHS(paste(location,"gshhg-bin-2.2.3/gshhs_f.b",sep='/'),
xlim=c(round(min(sim_[,2],obs_[,2])-0.1,1),round(max(sim_[,2],obs_[,2])+0.1,1)),
ylim=c(round(min(sim_[,3],obs_[,3])-0.1,1),round(max(sim_[,3],obs_[,3])+0.1,1)), n=15)
# longitude in degrees east of prime meridian
plotMap(florida, bg=clr$sea, col=clr$land)
#bathy
#addLines(egPoly,col=c('black','blue','blue','blue','blue'),lty=c(1,3,3,3,3))
# addPoints(obs_,col=vr2_colW,pch=10)
addPoints(obs_,pch=10,col='blue')
addLines(oconnected,col='blue')
addLines(sconnected,col='red')
addPoints(sim_[1,],col="black",pch=21,cex=1.5)  # tag release spot   warnings()
#   addPoints(sim_[2:dim(sim_)[1],],col=pt_col[2:length(pt_col)],
#                                   pch=pch_lst[2:length(pch_lst)],
#                                   cex=pchsz_lst[2:length(pchsz_lst)])
#   addPoints(sim_[11:20,],col="orange",pch=7)
#   addPoints(sim_[20:dim(sim_)[1],],col="green",pch=7)
#legend(x="bottomleft",bty="n",col=c('black','blue','blue','blue','blue'),
#         lwd=1,legend=as.character(isob),lty=c(1,3,3,3,3))
#title(for_title)
